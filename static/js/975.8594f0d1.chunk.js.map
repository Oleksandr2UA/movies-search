{"version":3,"file":"static/js/975.8594f0d1.chunk.js","mappings":"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","sources":["page/Genre/Genre.jsx"],"sourcesContent":["import { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { useRef } from \"react\";\nimport { Link, useLocation, useParams } from \"react-router-dom\";\nimport { MoviePreview } from \"../../components/MoviePreview/MoviePreview\";\nimport { Loader } from \"../../components/Loader/Loader\";\nimport { getGenres } from \"../../components/helpers/GenresData/getGenres\";\nimport \"../Genre/Genre.css\";\nimport { fetchMovieForPages } from \"../../components/helpers/GenresData/fetchMovieForPages\";\nimport {\n  ScrollToBottom,\n  ScrollToHalf,\n  ScrollToTop,\n} from \"../../components/helpers/ScrollToTop/ScrollToTop\";\n\nconst Genre = () => {\n  const defaultPage = 1;\n  const { genreId } = useParams();\n  const { movieId } = useParams(); //! STRING!!!!! ЗАВЖДИ робити конвертування у бажаний тип\n\n  const location = useLocation(); // Ця location в state отримує собі звідки прийшов (з Movies Details прокидую \"пропом\" в state)\n  const altPath = `/movies/${movieId}`;\n  const backLinkLocationRef = useRef(location.state?.from ?? altPath); //Якщо є локація, йди туди, як ні, повернись на сторінку фільму звідки прийшов\n\n  const altPathGenresPage = `/genres`;\n  // & По факту це зайве, бо так і так назад це завжди до /genres якщо не з фільма\n  // const backLinkLocationRefGenresPage = useRef(\n  //   location.state?.from ?? altPathGenresPage\n  // );\n\n  // Handling state\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [films, setFilms] = useState([]);\n  const [page, setPage] = useState(1);\n  const [genreName, setGenreName] = useState(null);\n  const [isLoadMore, setIsLoadMore] = useState(false);\n  const [isLoadMoreData, setIsLoadMoreData] = useState(false);\n\n  useEffect(() => {\n    const abortController = new AbortController();\n\n    async function getFilmsByGenre() {\n      try {\n        setIsLoading(true);\n        const filmsForPage1 = await fetchMovieForPages(\n          genreId,\n          abortController,\n          defaultPage,\n          1\n        );\n        setFilms(filmsForPage1);\n        setIsLoadMore(true);\n        setPage(2);\n\n        setError(null);\n      } catch (error) {\n        if (error.message === \"canceled\") return;\n        setError(\n          \"Something went wrong, try reloading page, if it doesnt help, there is no info about other films of this actor\"\n        );\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    getFilmsByGenre();\n\n    return () => {\n      abortController.abort();\n    };\n  }, [genreId]);\n\n  useEffect(() => {\n    const genreTitle = getGenres([Number(genreId)]); //! STRING!!!!!\n    // [{id: 28, name: 'Action'}]\n    setGenreName(genreTitle[0].name);\n  }, [genreId]);\n\n  async function onLoadMore() {\n    setIsLoadMore(false);\n    setIsLoadMoreData(true);\n    const abortController = new AbortController();\n\n    if (page === 2) {\n      const filmsForPage2 = await fetchMovieForPages(\n        genreId,\n        abortController,\n        page,\n        2\n      );\n      setFilms((prevFilms) => [...prevFilms, ...filmsForPage2]);\n    } else if (page === 3) {\n      const filmsForPage3 = await fetchMovieForPages(\n        genreId,\n        abortController,\n        page,\n        3\n      );\n      setFilms((prevFilms) => [...prevFilms, ...filmsForPage3]);\n    } else if (page === 4) {\n      const filmsForPage4 = await fetchMovieForPages(\n        genreId,\n        abortController,\n        page,\n        4\n      );\n      setFilms((prevFilms) => [...prevFilms, ...filmsForPage4]);\n    }\n\n    setPage((prevPage) => prevPage + 1);\n\n    page !== 4 ? setIsLoadMore(true) : setIsLoadMore(false); // If it is page 4 prohibid to loadmore (there arent any)\n    setIsLoadMoreData(false);\n  }\n\n  return (\n    <>\n      {/* {backLinkLocationRef.current !== '/movies' ? (\n        <Link to={backLinkLocationRef.current} className=\"go-back-link\">\n          Go back\n        </Link>\n      ) : (\n        <Link to={altPath} className=\"go-back-link\">\n          Go back(fixed)\n        </Link>\n      )} */}\n\n      <Link\n        to={movieId ? backLinkLocationRef.current : altPathGenresPage}\n        className=\"go-back-link\"\n      >\n        Go back\n      </Link>\n      <h2 className=\"genre-list-title header-page-title\">\n        Films with <span className=\"genre-list-title-name\">{genreName}</span>{\" \"}\n        genre\n      </h2>\n      {films.length !== 0 && (\n        <div className=\"scroll_wrapper\">\n          <ScrollToBottom />\n          <ScrollToHalf />\n        </div>\n      )}\n      {error && (\n        <>\n          <h2 className=\"error\">{error}</h2>\n        </>\n      )}\n      {isLoading && <Loader />}\n      {films.length !== 0 ? (\n        <MoviePreview films={films} movieId={movieId} />\n      ) : (\n        !isLoading && <Loader />\n      )}\n      {isLoadMore && !isLoading ? (\n        <button type=\"button\" className=\"genre-btn-load\" onClick={onLoadMore}>\n          Load more\n        </button>\n      ) : isLoadMoreData && !isLoading && films.length !== 0 ? (\n        <>\n          <Loader />\n        </>\n      ) : null}\n      {films.length !== 0 && (\n        <div className=\"scroll_wrapper\">\n          <ScrollToTop />\n          <ScrollToHalf />\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default Genre;\n"],"names":["Genre","_location$state$from","_location$state","genreId","useParams","movieId","location","useLocation","altPath","backLinkLocationRef","useRef","state","from","isLoading","setIsLoading","useState","error","setError","films","setFilms","page","setPage","genreName","setGenreName","isLoadMore","setIsLoadMore","isLoadMoreData","setIsLoadMoreData","useEffect","abortController","AbortController","async","filmsForPage1","fetchMovieForPages","message","getFilmsByGenre","abort","genreTitle","getGenres","Number","name","_jsxs","_Fragment","children","_jsx","Link","to","current","className","length","ScrollToBottom","ScrollToHalf","Loader","MoviePreview","type","onClick","filmsForPage2","prevFilms","filmsForPage3","filmsForPage4","prevPage","ScrollToTop"],"sourceRoot":""}