{"version":3,"file":"static/js/452.a55522f7.chunk.js","mappings":"mMAMA,MAgFA,EAhFeA,KACb,MAAMC,GAAWC,EAAAA,EAAAA,OACVC,EAAcC,IAAmBC,EAAAA,EAAAA,OACjCC,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,KAC5BC,EAAOC,IAAYF,EAAAA,EAAAA,UAAS,KAC5BG,EAAWC,IAAgBJ,EAAAA,EAAAA,WAAS,IACpCK,EAAOC,IAAYN,EAAAA,EAAAA,UAAS,OAEnCO,EAAAA,EAAAA,YAAU,KACRC,QAAQC,IACN,qEAKF,MAAMC,EAAQf,EAAagB,IAAI,SAC3BD,IACFR,EAASQ,GACTE,EAAWF,GACb,GACC,CAACf,IAEJ,MAAMiB,EAAaC,UACjBT,GAAa,GACbE,EAAS,MACT,IACE,MAAMR,QAAcgB,EAAAA,EAAAA,IAAiBb,GACrCF,EAASD,EACX,CAAE,MAAOiB,GACPT,EAAS,wBACX,CAAC,QACCF,GAAa,EACf,GAcF,OACEY,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kBAAiBC,SAAA,EAC9BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,YACJF,EAAAA,EAAAA,MAAA,QAAMI,SAdQC,IAChBA,EAAEC,iBAGF1B,EADyB,KAAVK,EAAe,CAAEA,SAAU,CAAC,EACpB,EAUIiB,SAAA,EACvBC,EAAAA,EAAAA,KAAA,SACEI,YAAY,oBACZC,KAAK,QACLC,MAAOxB,EACPyB,SAZeL,IACrBnB,EAASmB,EAAEM,cAAcF,MAAM,KAa3BN,EAAAA,EAAAA,KAAA,UAAQS,KAAK,SAAQV,SAAC,cAGvBf,IAAagB,EAAAA,EAAAA,KAACU,EAAAA,EAAM,IACpBxB,IAASc,EAAAA,EAAAA,KAAA,KAAAD,SAAIb,KAEdc,EAAAA,EAAAA,KAAA,MAAIF,UAAU,cAAaC,SACxBpB,IACEK,GACDL,EAAMgC,KAAIC,IAAoB,IAAnB,MAAErB,EAAK,GAAEsB,GAAID,EACtB,MAAME,EAAO,WAAWD,IACxB,OACEb,EAAAA,EAAAA,KAAA,MAAAD,UACEC,EAAAA,EAAAA,KAACe,EAAAA,GAAI,CAACC,GAAIF,EAAMG,MAAO,CAAEC,KAAM5C,GAAWyB,SACvCR,KAFIsB,EAIJ,QAIT,C","sources":["page/Movies/Movies.jsx"],"sourcesContent":["import { Link, useLocation, useSearchParams } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport { Loader } from \"../../components/Loader/Loader\";\nimport { fetchFilmsByName } from \"../../components/api/fetchFilms\";\nimport \"../Movies/Movies.css\";\n\nconst Movies = () => {\n  const location = useLocation();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [films, setFilms] = useState([]);\n  const [query, setQuery] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    console.log(\n      \"when component mounts, if to ignore mount, on mount title is null\"\n    );\n    //When component mounts I check if\n    // - there is title -> I came back from one film -> Put film's name in input, and make fetch\n    // - there is NO title (null) -> I haven't searched any film\n    const title = searchParams.get(\"query\");\n    if (title) {\n      setQuery(title);\n      fetchFilms(title);\n    }\n  }, [searchParams]);\n\n  const fetchFilms = async (query) => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const films = await fetchFilmsByName(query);\n      setFilms(films);\n    } catch (err) {\n      setError(\"Failed to fetch films\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    // console.log('query on submit');\n    const params = query !== \"\" ? { query } : {};\n    setSearchParams(params); // Update URL with input\n  };\n\n  const onInputChange = (e) => {\n    setQuery(e.currentTarget.value);\n  };\n\n  return (\n    <div className=\"movies__wrapper\">\n      <h1>Movies</h1>\n      <form onSubmit={onSubmit}>\n        <input\n          placeholder=\"Enter film's name\"\n          name=\"title\"\n          value={query}\n          onChange={onInputChange}\n        />\n        <button type=\"submit\">Search</button>\n      </form>\n\n      {isLoading && <Loader />}\n      {error && <p>{error}</p>}\n\n      <ul className=\"movies-list\">\n        {films &&\n          !isLoading &&\n          films.map(({ title, id }) => {\n            const path = `/movies/${id}`;\n            return (\n              <li key={id}>\n                <Link to={path} state={{ from: location }}>\n                  {title}\n                </Link>\n              </li>\n            );\n          })}\n      </ul>\n    </div>\n  );\n};\n\nexport default Movies;\n"],"names":["Movies","location","useLocation","searchParams","setSearchParams","useSearchParams","films","setFilms","useState","query","setQuery","isLoading","setIsLoading","error","setError","useEffect","console","log","title","get","fetchFilms","async","fetchFilmsByName","err","_jsxs","className","children","_jsx","onSubmit","e","preventDefault","placeholder","name","value","onChange","currentTarget","type","Loader","map","_ref","id","path","Link","to","state","from"],"sourceRoot":""}